# Create deciles of PGS and set middle deciles as the reference/base group
Df_mid <- Df %>%
mutate(
PGS_decile = ntile(scale(SCORESUM), 10),
PGS_decile = case_when(
PGS_decile %in% c("5", "6") ~ "5_6",
TRUE ~ as.character(PGS_decile)
),
PGS_decile = factor(PGS_decile, levels = c('5_6','1','2','3','4','7','8','9','10'))
)
## ---- FitModelDecile
# Run logistic regression with the PGS decile as the predictor
decile_model_lowest <- glm(Epilepsy ~ PGS_decile + Sex + PC1 + PC2 + PC3 + PC4 + PC5 + PC6,
family = binomial(link = 'logit'),
data = Df_lowest)
decile_model_mid <- glm(Epilepsy ~ PGS_decile + Sex + PC1 + PC2 + PC3 + PC4 + PC5 + PC6,
family = binomial(link = 'logit'),
data = Df_mid)
save(decile_model_lowest, decile_model_mid, file = "Results/decile_model.Rdata")
## ---- DecileModelResultsTable
tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(p.value_adjusted = p.adjust(p.value, method = "BH", n = 9)) %>%
kable(caption = "Results from logistic regression with decile of PGS as predictor and lowest decile as the reference (Back-transformation conducted so estimate = odds ratio. P-value adjusted for 9 comparisons with Benjamini-Hochberg method)")
tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(p.value_adjusted = p.adjust(p.value, method = "BH", n = 9)) %>%
kable(caption = "Results from logistic regression with decile of PGS as predictor and middle deciles (5th and 6th) as the reference (Back-transformation conducted so estimate = odds ratio. P-value adjusted for 9 comparisons with Benjamini-Hochberg method)")
## ---- DecileModelResultsTableMid
tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(p.value_adjusted = p.adjust(p.value, method = "BH", n = 9)) %>%
kable(caption = "Results from logistic regression with decile of PGS as predictor and middle deciles (5th and 6th) as the reference (Back-transformation conducted so estimate = odds ratio. P-value adjusted for 9 comparisons with Benjamini-Hochberg method)")
## ---- DecileModelResultsTableMid
tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(p.value_adjusted = p.adjust(p.value, method = "BH", n = 8)) %>%
kable(caption = "Results from logistic regression with decile of PGS as predictor and middle deciles (5th and 6th) as the reference (Back-transformation conducted so estimate = odds ratio. P-value adjusted for 9 comparisons with Benjamini-Hochberg method)")
## ---- DecileModelResultsGraphLowest
or_table <- tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(2:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
## ---- DecileModelResultsGraphMid
or_table <- tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(2:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 8),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
View(or_table)
## ---- DecileModelResultsGraphMid
or_table <- tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 8),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
## ---- DecileModelResultsGraphLowest
or_table <- tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(2:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
) %>%
add_row(
term = "PGS_decile1",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA,
p.value_adjusted = NA,
sig_label = "",
decile = factor("1", levels = as.character(1:10))
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
## ---- DecileModelResultsGraphLowest
or_table <- tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(2:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
) %>%
add_row(
term = "PGS_decile1",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = 1,
p.value_adjusted = 1,
sig_label = "",
decile = factor("1", levels = as.character(1:10))
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
## ---- DecileModelResultsGraphLowest
or_table <- tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
add_row(
term = "PGS_decile1",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA,
p.value_adjusted = NA,
sig_label = "",
decile = factor("1", levels = as.character(1:10))
) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(2:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
## ---- DecileModelResultsGraphLowest
or_table <- tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
add_row(
term = "PGS_decile1",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
## ---- DecileModelResultsGraphMid
or_table <- tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
add_row(
term = "PGS_decilemiddle",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
or_table <- tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 8),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
## ---- DecileModelResultsGraphMid
or_table <- tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
add_row(
term = "PGS_decilemiddle",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
## ---- DecileModelResultsGraphMid
or_table <- tidy(decile_model_mid, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
add_row(
term = "PGS_decile5",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile",
labels = c('1', '2', '3', '4', 'middle quantile', '7', '8', '9', '10')) +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile",
labels = c('1', '2', '3', '4', '5 & 6', '7', '8', '9', '10')) +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
# Calculate the area under the curve from receiver operating characteristic analysis
# Method 1: Only include PGS in ROC model
## ---- LoadDataFrame
load(file = "Data/Df.Rdata")
## ----
## ---- ROCFitMethod1
model_PGS <- glm(Epilepsy ~ scale(SCORESUM),
family = binomial(link = 'logit'),
data = Df)
roc_model_PGS <- roc(Df$Epilepsy, model_PGS$fitted.values)
save(roc_model_PGS, file = "Results/roc_model_PGS.Rdata")
## ----
## ---- AUCResultsMethod1
# Doing a one-sided test of significance (> 0.5) therefore use a one-sided 95%CI (equivalent to just the lower bound of a 90% CI)
tibble(
AUC = as.numeric(auc(roc_model_PGS)),
AUC_SE = sqrt(var(roc_model_PGS)),
AUC_Z = (AUC - 0.5) / AUC_SE,
AUC_p = pnorm(AUC_Z, mean = 0, sd = 1, lower.tail = F),
AUC_90perc_CI_lower = as.numeric(ci(roc_model_PGS, conf.level = 0.90))[1]) %>%
kable(caption = "AUC results and one-sided test of significance if AUC is > 0.5")
## ----
## ---- AUCPlotMethod1
plot(roc_model_PGS,
print.auc = TRUE,
main = paste("ROC curve for PGS of epilepsy"))
## ----
# Calculate the area under the curve from receiver operating characteristic analysis
# Method 2: Run ROC analysis with covariates only and with covariates + PGS, then calculate AUC attributable to PGS
## ---- LoadDataFrame
load(file = "Data/Df.Rdata")
load(file = "Results/logistic_regression_models.Rdata")
## ----
## ---- ROCFitMethod2
# Use logistic regression models to run ROC analysis for covariates only and covariats + PGS
roc_model_covar <- roc(Df$Epilepsy, logistic_regression_covar$fitted.values)
roc_model_full <- roc(Df$Epilepsy, logistic_regression_PGS$fitted.values)
save(roc_model_covar, roc_model_full, file = "Results/roc_models_covar_full.Rdata")
## ----
## ---- AUCResultsMethod2
# DeLong's test for two correlated ROC curves
sig_test <- roc.test(roc_model_full, roc_model_covar)
tibble(
AUC_covariates_only = as.numeric(auc(roc_model_covar)),
AUC_covariates_plus_PGS = as.numeric(auc(roc_model_full)),
AUC_change = AUC_covariates_only - AUC_covariates_plus_PGS,
AUC_change_Z = sig_test[["statistic"]][["Z"]],
AUC_change_p = sig_test[["p.value"]],
AUC_change_CI_lower = sig_test$conf.int[1],
AUC_change_CI_upper = sig_test$conf.int[2]) %>%
kable(caption = "AUC results and DeLong's test for two correlated ROC curves (does adding PGS to analysis significanlty increase AUC?)")
## ----
## ---- AUCPlotMethod2
roc_covar_df <- ggroc(roc_model_covar) %>%
.[["data"]] %>%
mutate(model = "covar")
roc_full_df  <- ggroc(roc_model_full) %>%
.[["data"]] %>%
mutate(model = "full")
roc_combined_df <- roc_covar_df %>%
bind_rows(roc_full_df)
auc_covar <- round(auc(roc_model_covar), 3)
auc_full  <- round(auc(roc_model_full), 3)
ggplot(roc_combined_df, aes(x = specificity, y = sensitivity, colour = model, linetype = model)) +
geom_line() +
scale_x_reverse("Specificity") +
scale_y_continuous("Sensitivity") +
scale_linetype_manual(values = c("covar" = "solid", "full" = "dashed")) +
scale_colour_manual(values = c("covar" = "#160F3BFF", "full" = "#F4685CFF")) +
annotate("text",
x = max(roc_combined_df$specificity, na.rm = TRUE) - 0.1,
y = min(roc_combined_df$sensitivity, na.rm = TRUE) + 0.05, hjust = 0,
label = paste("AUC (Covariates only) =", auc_covar), color = "#160F3BFF") +
annotate("text",
x = max(roc_combined_df$specificity, na.rm = TRUE) - 0.1,
y = min(roc_combined_df$sensitivity, na.rm = TRUE) + 0.05 + 0.05,
hjust = 0, label = paste("AUC (Covariates + PGS) =", auc_full), color = "#F4685CFF") +
theme_classic() +
theme(text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10,0,0,0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0,10,0,0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "none")
## ----
knitr::opts_chunk$set(echo = TRUE, eval=FALSE, warning=FALSE, message=FALSE, error=FALSE)
options(tinytex.engine = 'xelatex')
#Read in R scripts
knitr::read_chunk('Scripts/01_Load_packages_and_data.R')
knitr::read_chunk('Scripts/02_Logistic_regression.R')
knitr::read_chunk('Scripts/03_Nagelkerkes_R2.R')
knitr::read_chunk('Scripts/04_R2_liability_scale.R')
knitr::read_chunk('Scripts/05_OR_by_decile_of_PGS.R')
knitr::read_chunk('Scripts/06_AUC_Method1.R')
knitr::read_chunk('Scripts/07_AUC_Method2.R')
knitr::read_chunk('Scripts/07_AUC_Method2.R')
a <- ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile",
labels = c('1', '2', '3', '4', '5 & 6', '7', '8', '9', '10')) +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
ggsave(a, file = "Results/plto_mid.png", width = 10, height = 10, unit = "cm")
a <- ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
## ---- DecileModelResultsGraphLowest
or_table <- tidy(decile_model_lowest, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.95,) %>%
filter(str_detect(term, "PGS_decile")) %>%
add_row(
term = "PGS_decile1",
estimate = 1,
conf.low = 1,
conf.high = 1,
p.value = NA) %>%
mutate(
decile = str_remove(term, "PGS_decile"),
decile = factor(decile, levels = as.character(1:10)),
p.value_adjusted = p.adjust(p.value, method = "BH", n = 9),
sig_label = ifelse(p.value_adjusted < 0.05, "*", "")
)
a <- ggplot(or_table, aes(x = decile, y = estimate)) +
geom_hline(yintercept = 1, linetype = "dashed", color = "gray") +
geom_point() +
geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +
scale_y_continuous("Odds Ratio") +
scale_x_discrete("PGS Decile") +
geom_text(aes(label = sig_label, y = conf.high + 1), size = 6) +
theme_classic() +
theme(
text = element_text(family = "Calibri"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 12, colour = "black", margin = margin(10, 0, 0, 0)),
axis.title.y = element_text(size = 12, colour = "black", margin = margin(0, 10, 0, 0)),
legend.title = element_blank(),
legend.text = element_text(size = 10, colour = "black"),
legend.position = "right"
)
ggsave(a, file = "Results/plto_low.png", width = 10, height = 10, unit = "cm")
